from dis import disco
from distutils.command.upload import upload
import random, sys
from turtle import update

try: 
    import bext
except ImportError:
    print('This program require the bext module, use pip install bext to install')
    sys.exit()

Board_width = 16
Board_height = 14
Moves_per_game = 20

Heart = chr(9829)
Diamond = chr(9830)
Spade = chr(9824)
Club = chr(9827)
Ball = chr(9679)
Triangle = chr(9650)

Block = chr(9608)
LeftRight = chr(9472)
UpDown = chr(9474)
DownRight = chr(9484)
DownLeft = chr(9488)
UpRight = chr(9492)
UpLeft = chr(9496)

Tile_Types = (0, 1, 2, 3, 4, 5)
Colors_Maps = {0: 'red', 1: 'green', 2: 'blue', 3: 'yellow', 4: 'cyan', 5: 'purple'}
Color_Mode = 'color mode'
Shapes_Map = {0: Heart, 1: Triangle, 2: Diamond, 3: Ball, 4: Club, 5: Spade}
Shape_Mode = 'shape mode'

def main():
    bext.bg('black')
    bext.fg('white')
    bext.clear()
    print('''Flooder
    Set the upper left color/shape, which filles in all the adjacent squares
    of that color/shape. Try to make the entire board the same color/shape''')

    print('Do you want to play in colorblind mode? Y/N')
    response = input('> ')
    if response.upper().startswith('y'):
        displayMode = Shape_Mode
    else:
        displayMode = Color_Mode

    gameBoard = getNewBoard()
    movesLeft = Moves_per_game

    while True:
        displayBoard(gameBoard, displayMode)

        print('Moves left:', movesLeft)
        playerMove = askForPlayerMove(displayMode)
        changeTile(playerMove, gameBoard, 0, 0)
        movesLeft -=1

        if hasWon(gameBoard):
            displayBoard(gameBoard, displayMode)
            print('You have won!')
            break
        elif movesLeft == 0:
            displayBoard(gameBoard, displayMode)
            print('You have run out of moves!')
            break

def getNewBoard():
    """Return a dictionary of a new Flood It board."""

    board = {}

    for x in range(Board_width):
        for y in range(Board_height):
            board[(x, y)] = random.choice(Tile_Types)

    for i in range(Board_width * Board_height):
        x = random.randint(0, Board_width - 2)
        y = random.randint(0, Board_height - 1)
        board[(x + 1, y)] = board[(x, y)]
    return board
def displayBoard(board, displayMode):
    """Display the board on the screen."""
    bext.fg('white')
    # Display the top edge of the board:
    print(DownRight + (LeftRight * Board_width) + DownLeft)

    # Display each row:
    for y in range(Board_height):
        bext.fg('white')
        if y == 0: # The first row begins with '>'.
            print('>', end='')
        else: # Later rows begin with a white vertical line.
            print(UpDown, end='')

    # Display each tile in this row:
        for x in range(Board_width):
            bext.fg(Colors_Maps[board[(x, y)]])
            if displayMode == Color_Mode:
                print(Block, end='')
            elif displayMode == Shape_Mode:
                print(Shapes_Map[board[(x, y)]], end='')

        bext.fg('white')
        print(UpDown) # Rows end with a white vertical line.
    # Display the bottom edge of the board:
    print(UpRight + (LeftRight * Board_width) + UpLeft)


def askForPlayerMove(displayMode):
    """Let the player select a color to paint the upper left tile."""
    while True:
        bext.fg('white')
        print('Choose one of ', end='')

        if displayMode == Color_Mode:
            bext.fg('red')
            print('(R)ed ', end='')
            bext.fg('green')
            print('(G)reen ', end='')
            bext.fg('blue')
            print('(B)lue ', end='')
            bext.fg('yellow')
            print('(Y)ellow ', end='')
            bext.fg('cyan')
            print('(C)yan ', end='')
            bext.fg('purple')
            print('(P)urple ', end='')
        elif displayMode == Shape_Mode:
            bext.fg('red')
            print('(H)eart, ', end='')
            bext.fg('green')
            print('(T)riangle, ', end='')
            bext.fg('blue')
            print('(D)iamond, ', end='')
            bext.fg('yellow')
            print('(B)all, ', end='')
            bext.fg('cyan')
            print('(C)lub, ', end='')
            bext.fg('purple')
            print('(S)pade, ', end='')
        bext.fg('white')
        print('or QUIT:')
        response = input('> ').upper()
        if response == 'QUIT':
            print('Thanks for playing!')
            sys.exit()
        if displayMode == Color_Mode and response in tuple('RGBYCP'):
            # Return a tile type number based on the response:
            return {'R': 0, 'G': 1, 'B': 2,
                'Y': 3, 'C': 4, 'P': 5}[response]
        if displayMode == Shape_Mode and response in tuple('HTDBCS'):
            # Return a tile type number based on the response:
            return {'H': 0, 'T': 1, 'D':2,
                'B': 3, 'C': 4, 'S': 5}[response]


def changeTile(tileType, board, x, y, charToChange=None):
    """Change the color/shape of a tile using the recursive flood fill
    algorithm."""
    if x == 0 and y == 0:
        charToChange = board[(x, y)]
        if tileType == charToChange:
            return # Base Case: Already is the same tile.

    board[(x, y)] = tileType

    if x > 0 and board[(x - 1, y)] == charToChange:
        # Recursive Case: Change the left neighbor's tile:
        changeTile(tileType, board, x - 1, y, charToChange)
    if y > 0 and board[(x, y - 1)] == charToChange:
        # Recursive Case: Change the top neighbor's tile:
        changeTile(tileType, board, x, y - 1, charToChange)
    if x < Board_width - 1 and board[(x + 1, y)] == charToChange:
        # Recursive Case: Change the right neighbor's tile:
        changeTile(tileType, board, x + 1, y, charToChange)
    if y < Board_height - 1 and board[(x, y + 1)] == charToChange:
        # Recursive Case: Change the bottom neighbor's tile:
        changeTile(tileType, board, x, y + 1, charToChange)


def hasWon(board):
    """Return True if the entire board is one color/shape."""
    tile = board[(0, 0)]

    for x in range(Board_width):
        for y in range(Board_height):
            if board[(x, y)] != tile:
                return False
    return True

    # If this program was run (instead of imported), run the game:
if __name__ == '__main__':
    main()
